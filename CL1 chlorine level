//Low level alarm at 75 gallons
//Tank height to sensor is 51.30 inches
//Sensor out of range @ 41.80 inches

// include the library code:
#include <LiquidCrystal_I2C.h>
#include <RunningMedian.h>

//Initialize the library with the numbers of the interface pins
LiquidCrystal_I2C lcd(0x27,20,4);
                    //SDA pin A4
                    //SCL pin A5
                    
const int TRIG = 6; //Module pins
const int ECHO = 7; 
//const int BUZZER = 8; //Buzzer pin. caused interferance with sensor
const int LED = 9; //LED pin
const int BUTTON = 10; // button pin

//Blink without delay variables
unsigned long previousMillis = 0;
unsigned long dispGalMillis = 0;  
const long interval = 500;
const long oneSecondInterval = 1000;
const long longInterval = 10000;
int ledState = LOW;

//Variables for acknowledgement
bool ack = false;
int oldButtonState = 0;
int buttonState = 0;

//Variables for specific tank
int lowLevel = 75; //Low level limit, in gallons
double fullTankHeight = 52.25; //Tank height to sensor in inches
double outOfRangeHeight = fullTankHeight - 9.5; //Sensor out of range in inches
double fullTankVolume = fullTankHeight*6.4; //Converts inches to gallons
double outOfRangeVolume = outOfRangeHeight*6.4; // Sensor out of range in gallons
double emptySpace;
double gallons;
double height = gallons/6.4;
double galArr[9];

RunningMedian samples = RunningMedian(9);

void setup() { 
  Serial.begin(9600);  
  lcd.init();
  lcd.backlight();
  lcd.print("   CL-1 Capacity    ");
  lcd.print("Build 6.9420");

  pinMode(TRIG, OUTPUT); // Initializing Trigger Output and Echo Input 
  pinMode(ECHO, INPUT);  
  //pinMode(BUZZER,OUTPUT);
  pinMode(LED, OUTPUT);
  pinMode(BUTTON, INPUT);  
  delay(1000);
  lcd.clear();
  lcd.print("   CL-1 Capacity    ");

} //end setup

void loop() {
  lcd.setCursor(0,1);  
  unsigned long currentMillis = millis();
  
  digitalWrite(TRIG, LOW); // Set the trigger pin to low for 2uS 
  delayMicroseconds(2);    
  digitalWrite(TRIG, HIGH); // Send a 10uS high to trigger ranging 
  delayMicroseconds(20);    
  digitalWrite(TRIG, LOW); // Send pin low again 
  float distance = pulseIn(ECHO, HIGH,26000); // Read in times pulse 
    
  distance = distance/58; //Convert the pulse duration to distance                         
  distance = (distance*0.3937); //Convert from cm to inches 
  //distance = distanceOffset(distance); //Accounts for sensor being crap
  double emptySpace = distance*6.4; //Converts to gallons for CL-1 tank
  double gallons = fullTankVolume - emptySpace; //Calculates gallons of CL-1 in tank based off tank volume and empty space
  if(gallons>=0 && gallons<(outOfRangeVolume+5)){
    samples.add(gallons);
  }
  gallons = samples.getMedian();
  if (isnan(gallons)) {
    lcd.setCursor(0,1);
    lcd.print(" Waiting for level "); 
    lcd.setCursor(0,2);
    lcd.print(" to come into range ");   
  }
  
  checkLevel(gallons, currentMillis); 
  checkAck(oldButtonState, buttonState);
  //Serial.println(digitalRead(BUTTON));
  //Turn on/off serial prints
  //Serial.print("height: ");Serial.println(height);
  Serial.print("distance: ");Serial.println(distance);
  Serial.print("gallons: ");Serial.println(gallons);
  //Serial.println(intEmptySpace);
  //Serial.println(fullTankVolume);
} //end loop

//Checks level of tank for alarm
void checkLevel (double gallons, unsigned long currentMillis){
  if (gallons<lowLevel){
    if(gallons<=0){
      gallons = 0;
    }
    if(ack != true){  //checks if acknowledged
      lcd.print(gallons, 0);
      lcd.print(" Gallons        ");
      lcd.setCursor(0,2);
      lcd.print("Low Level Alarm     ");
      lcd.setCursor(0,3);
      lcd.print("                  "); 
      //digitalWrite(BUZZER, HIGH);
      if (currentMillis - previousMillis >= interval) {
        blinkLed();
        previousMillis = currentMillis; 
    }
  }   
    else{   
      lcd.print(gallons, 0);
      lcd.print(" Gallons        ");
      lcd.setCursor(0,2);
      lcd.print("Low Level Alarm     ");
      lcd.setCursor(0,3);
      lcd.print("**Acknowledged**    ");
      digitalWrite(LED, HIGH);
      //digitalWrite(BUZZER, LOW);
    }
  }
  if (gallons>=lowLevel){
    if(gallons<=outOfRangeVolume){
      lcd.print(gallons, 0);
      lcd.print(" Gallons        ");
      lcd.setCursor(0,2);
      lcd.print("                    ");
      lcd.setCursor(0,3);
      lcd.print("                    ");              
      //digitalWrite(BUZZER, LOW);
      digitalWrite(LED, LOW);
      buttonState = 0;
      ack = false;}
    else{   
      lcd.print("Tank Full           ");
      lcd.setCursor(0,2);
      lcd.print("Sensor Out of Range ");
      lcd.setCursor(0,3);
      lcd.print("                    ");
      digitalWrite(LED, HIGH);  
   
    }
  }   
//        Serial.print("ButtonState");
//        Serial.println(buttonState);
//        Serial.println("Old Button State");
//        Serial.println(oldButtonState);
//        Serial.print("Ack");
//        Serial.println(ack);    
}


// Checks if alarm has been acknowledged   
bool checkAck(int oldButtonState, int buttonState){
  oldButtonState = digitalRead(BUTTON);
  if(buttonState != oldButtonState){
    buttonState = 1;
    ack = true;
    }
  return ack;
}

void blinkLed(){  
  if (ledState == LOW) {
    ledState = HIGH;
  } 
  else {
    ledState = LOW;
  }  
  digitalWrite(LED, ledState);  
}

//Accounts for sensor errors based on distance
float distanceOffset(float distance){
  if(distance>=9.5 && distance<10){
    distance = distance + .5;
  }
  else if(distance>=10 && distance<14){
    distance = distance + .5;
  }
  else if(distance>=14 && distance<15){
    distance = distance + .70;
  }
  else if(distance>=15 && distance<17){
    distance = distance + .25;
  }
  else if(distance>=17 && distance<17.5){
    distance = distance + 0;
  }
  else if(distance>=17.5 && distance<20){
    distance = distance + .25;
  }
  else if(distance>=20 && distance<20.5){
    distance = distance + .25;
  }
  else if(distance>=20.5 && distance<25){
    distance = distance + .2;
  }
  else if(distance>=25 && distance<30){
    distance = distance + 0;
  }
  else if(distance>=30 && distance<32){
    distance = distance + 0;
  }
  else if(distance>=32 && distance<40){
    distance = distance + .1;
  }
  else if(distance>=40 && distance<42){
    distance = distance + .2;
  }
  else if(distance>=42 && distance<50){
    distance = distance + .15;
  }
  else{
    distance = distance + .15;
  }
  return distance;
}
